import React, { useState, useEffect } from 'react';
import { multiplayerManager } from '../utils/multiplayerManager';
import { Player, MultiplayerGameState } from '../types/game';

interface MultiplayerProps {
  isOpen: boolean;
  onClose: () => void;
}

const Multiplayer: React.FC<MultiplayerProps> = ({ isOpen, onClose }) => {
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [isConnecting, setIsConnecting] = useState<boolean>(false);
  const [roomId, setRoomId] = useState<string>('');
  const [playerName, setPlayerName] = useState<string>('');
  const [playerColor, setPlayerColor] = useState<string>('#4CAF50');
  const [gameState, setGameState] = useState<MultiplayerGameState | null>(null);
  const [error, setError] = useState<string>('');

  const colors = [
    '#4CAF50', '#2196F3', '#FF5722', '#9C27B0', 
    '#FF9800', '#00BCD4', '#E91E63', '#795548'
  ];

  useEffect(() => {
    if (isOpen) {
      // Set up event listeners
      multiplayerManager.onStateUpdate((state) => {
        setGameState(state);
      });

      multiplayerManager.onPlayerJoin((player) => {
        console.log('Player joined:', player.name);
      });

      multiplayerManager.onPlayerLeave((playerId) => {
        console.log('Player left:', playerId);
      });

      multiplayerManager.onGameStart(() => {
        console.log('Game started!');
      });

      multiplayerManager.onGameEnd((winner) => {
        alert(`–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name} —Å ${winner.score} –æ—á–∫–∞–º–∏!`);
      });

      // Check connection status
      setIsConnected(multiplayerManager.isConnected());
    }
  }, [isOpen]);

  const handleConnect = async () => {
    setIsConnecting(true);
    setError('');

    try {
      await multiplayerManager.connect();
      setIsConnected(true);
    } catch (error) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error('Connection error:', error);
    } finally {
      setIsConnecting(false);
    }
  };

  const handleDisconnect = () => {
    multiplayerManager.disconnect();
    setIsConnected(false);
    setGameState(null);
    setRoomId('');
  };

  const handleJoinRoom = () => {
    if (!playerName.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞');
      return;
    }

    setError('');
    multiplayerManager.setPlayerName(playerName);
    multiplayerManager.setPlayerColor(playerColor);
    multiplayerManager.joinRoom(roomId || undefined);
  };

  const handleLeaveRoom = () => {
    multiplayerManager.leaveRoom();
    setGameState(null);
    setRoomId('');
  };

  const handleStartGame = () => {
    if (multiplayerManager.isHost()) {
      multiplayerManager.startGame();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="multiplayer-overlay">
      <div className="multiplayer-modal">
        <div className="multiplayer-header">
          <h2>üåê –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</h2>
          <button className="close-button" onClick={onClose}>
            ‚úï
          </button>
        </div>

        <div className="multiplayer-content">
          {/* Connection Status */}
          <div className="connection-section">
            <h3>üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h3>
            <div className="connection-status">
              <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>
                {isConnected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}
              </span>
            </div>
            
            {!isConnected ? (
              <button 
                className="connect-button"
                onClick={handleConnect}
                disabled={isConnecting}
              >
                {isConnecting ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
              </button>
            ) : (
              <button className="disconnect-button" onClick={handleDisconnect}>
                –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
              </button>
            )}
          </div>

          {/* Player Settings */}
          {isConnected && (
            <div className="player-settings">
              <h3>üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–∞</h3>
              
              <div className="input-group">
                <label>–ò–º—è –∏–≥—Ä–æ–∫–∞:</label>
                <input
                  type="text"
                  value={playerName}
                  onChange={(e) => setPlayerName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                  maxLength={20}
                />
              </div>

              <div className="input-group">
                <label>–¶–≤–µ—Ç –∑–º–µ–π–∫–∏:</label>
                <div className="color-picker">
                  {colors.map((color) => (
                    <button
                      key={color}
                      className={`color-option ${playerColor === color ? 'selected' : ''}`}
                      style={{ backgroundColor: color }}
                      onClick={() => setPlayerColor(color)}
                    />
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Room Management */}
          {isConnected && (
            <div className="room-section">
              <h3>üè† –ö–æ–º–Ω–∞—Ç–∞</h3>
              
              {!gameState ? (
                <div className="join-room">
                  <div className="input-group">
                    <label>ID –∫–æ–º–Ω–∞—Ç—ã (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π):</label>
                    <input
                      type="text"
                      value={roomId}
                      onChange={(e) => setRoomId(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã"
                    />
                  </div>
                  
                  <button 
                    className="join-button"
                    onClick={handleJoinRoom}
                    disabled={!playerName.trim()}
                  >
                    {roomId ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'}
                  </button>
                </div>
              ) : (
                <div className="room-info">
                  <div className="room-details">
                    <p><strong>ID –∫–æ–º–Ω–∞—Ç—ã:</strong> {gameState.roomId}</p>
                    <p><strong>–†–µ–∂–∏–º:</strong> {gameState.gameMode}</p>
                    <p><strong>–ò–≥—Ä–æ–∫–æ–≤:</strong> {gameState.players.length}</p>
                    {multiplayerManager.isHost() && (
                      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –•–æ—Å—Ç</p>
                    )}
                  </div>

                  <div className="players-list">
                    <h4>–ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ:</h4>
                    {gameState.players.map((player) => (
                      <div 
                        key={player.id}
                        className="player-item"
                        style={{ borderLeftColor: player.color }}
                      >
                        <span className="player-name">{player.name}</span>
                        <span className="player-score">{player.score} –æ—á–∫–æ–≤</span>
                        <span className="player-status">
                          {player.isAlive ? 'üü¢' : 'üî¥'}
                        </span>
                      </div>
                    ))}
                  </div>

                  <div className="room-actions">
                    {multiplayerManager.isHost() && (
                      <button className="start-game-button" onClick={handleStartGame}>
                        üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                      </button>
                    )}
                    <button className="leave-room-button" onClick={handleLeaveRoom}>
                      –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Error Display */}
          {error && (
            <div className="error-message">
              ‚ùå {error}
            </div>
          )}
        </div>

        <div className="multiplayer-footer">
          <button className="close-button" onClick={onClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default Multiplayer;
